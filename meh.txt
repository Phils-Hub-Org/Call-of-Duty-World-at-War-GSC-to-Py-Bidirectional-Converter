class Token:

    @classmethod
    def getType(cls, value: str) -> tuple:
        match value:
            # Keywords
            case value if value in {'if', 'else', 'while', 'for', 'switch', 'case', 'break', 'continue', 'return', 'true', 'false', 'undefined', 'include', 'level'}:
                return ('keyword', value)
            
            # Identifiers (can be var, func, etc.)  var, var1, func, func1, etc.
            # Alphabetical chars
            case value if value.isalpha():  # (isalpha checks all chars in value)
                return ('identifier', value)
            # Alphanumeric chars
            case value if cls.containsBothLettersAndDigits(value):  # (this checks all chars in value)
                return ('identifier', value)

            # Numbers
            case value if value.isdigit():
                return ('number', value)

            # Comments
            case value if value.startswith('//') or (value.startswith('/*') and value.endswith('*/')):
                return ('comment', value)
            
            # Newline
            case value if value == '\n':
                return ('newline', value)

            # Operators
            case value if value in {'+', '=', '-', '*', '/', '%'}:
                return ('operator', value)

            # Punctuation
            case value if value in {';', '(', ')', '{', '}', '[' ,']', '"', ':'}:
                return ('punctuation', value)
            
            # Anything else (default case)
            case _:
                print(f'Unknown character: {value}')
                return ('unknown', value)  # Can handle unknown characters if needed
    
    def containsBothLettersAndDigits(value: str) -> bool:
        return any(char.isalpha() for char in value) and any(char.isdigit() for char in value)

def my_function(x):
    # This function does something
    if x > 10:
        return "Greater than 10"
    else:
        return "10 or less"

[
    ('KEYWORD', 'def'),
    ('IDENTIFIER', 'my_function'),
    ('LPAREN', '('),
    ('IDENTIFIER', 'x'),
    ('RPAREN', ')'),
    ('COLON', ':'),
    ('NEWLINE', '\n'),
    ('comment', 'This function does something'),
    ('INDENT', '    '),  # Indentation for the function body
    ('KEYWORD', 'if'),
    ('IDENTIFIER', 'x'),
    ('OPERATOR', '>'),
    ('NUMBER', '10'),
    ('COLON', ':'),
    ('NEWLINE', '\n'),
    ('INDENT', '        '),  # Indentation for the if block
    ('KEYWORD', 'return'),
    ('STRING', '"Greater than 10"'),
    ('NEWLINE', '\n'),
    ('DEDENT', ''),  # Dedentation after the if block
    ('KEYWORD', 'else'),
    ('COLON', ':'),
    ('NEWLINE', '\n'),
    ('INDENT', '        '),  # Indentation for the else block
    ('KEYWORD', 'return'),
    ('STRING', '"10 or less"'),
    ('NEWLINE', '\n'),
    ('DEDENT', ''),  # Dedentation back to the function level
    ('EOF', '')
]

[
    ('newline', '\n'), 
    ('newline', '\n'), 
    ('identifier', 'x'), 
    ('operator', '='), 
    ('number', '10'), 
    ('punctuation', ';'), 
    ('newline', '\n'), 
    ('identifier', 'if'),
    ('punctuation', '('),
    ('identifier', 'x'),
    ('operator', '>'),
    ('number', '5'),
    ('punctuation', ')'),
    ('punctuation', '{'),
    ('newline', '\n'),
    ('identifier', 'x'),
    ('operator', '+'),
    ('operator', '='), ('number', '1'), ('punctuation', ';'), ('newline', '\n'), ('punctuation', '}')
]

COMMENT: For single-line and multi-line comments.
IDENTIFIER: For variable names, function names, etc.

ADD: For the + character.
SUBTRACT: For the - character.
MULTIPLY: For the * character.
DIVIDE: For the / character.
MODULUS: For the % character.
ASSIGNMENT: For the = character.
EQUALS: For the == character.
GREATER_THAN: For the > character.
LESS_THAN: For the < character.
GREATER_THAN_OR_EQUAL_TO: For the >= character.
LESS_THAN_OR_EQUAL_TO: For the <= character.
PLUS_EQUALS: For the += character.
SUBTRACT_EQUALS: For the -= character.
MULTIPLY_EQUALS: For the *= character.
DIVIDE_EQUALS: For the /= character.

NUMBER: For numerical values.
KEYWORD: For language keywords like if.
SEMICOLON: For the ; character.
LPAREN: For the ( character.
RPAREN: For the ) character.
LBRACE: For the { character.
RBRACE: For the } character.
LBRACKET: For the [ character.
RBRACKET: For the ] character.
QUOTE: For the " character.
DOUBLE_COLON_IDENTIFIER: For the :: character.
SEMICOLON: For the ; character.
PREPROCESSOR_DIRECTIVE: For preprocessor directives like #include.
STRING: For string literals or paths used in directives.
DOT: For the . character.
COMMA: For the , character.
LOCAL_STRING: For the & character.
LOGICAL_AND: For the && character.
LOGICAL_NOT: For the ! character.
LOGICAL_OR: For the || character.
PATH_SEPARATOR: For the \ character.
EOF: For the end of the file.